{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMSUUz5pKNkVS2mMbgA1Est",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DevNerdGR/ComputerGeneratedTrivia/blob/main/trials/retrieverTrial\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G9h4auasosM0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b55cd72d-6275-4e31-e421-52dbba0cda46"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-----Rapid (databased) Flamethrower-----\n",
            "Type 'q' to quit anytime!\n",
            "\n",
            "Question: What is the speed of light in a vacuum?\n"
          ]
        }
      ],
      "source": [
        "import requests\n",
        "import json\n",
        "import random\n",
        "import html\n",
        "import time\n",
        "\n",
        "class retriever:\n",
        "    token = \"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        response = json.loads((requests.get(\"https://opentdb.com/api_token.php?command=request\")).content.decode())\n",
        "        self.token = response[\"token\"]\n",
        "        #print(f\"Token: {self.token}\")\n",
        "\n",
        "    def getScienceAndNat(self, num = 1):\n",
        "        response = json.loads((requests.get(f\"https://opentdb.com/api.php?amount={num}&category=17&token={self.token}\")).content.decode())\n",
        "        return self.parseResponseToQuestions(response)\n",
        "\n",
        "    def getScienceComputers(self, num = 1):\n",
        "        response = json.loads((requests.get(f\"https://opentdb.com/api.php?amount={num}&category=18&token={self.token}\")).content.decode())\n",
        "        return self.parseResponseToQuestions(response)\n",
        "\n",
        "    def getMath(self, num = 1):\n",
        "        response = json.loads((requests.get(f\"https://opentdb.com/api.php?amount={num}&category=19&token={self.token}\")).content.decode())\n",
        "        return self.parseResponseToQuestions(response)\n",
        "\n",
        "    def getSingleRandom(self):\n",
        "        response = json.loads((requests.get(f\"https://opentdb.com/api.php?amount=1&category={random.randrange(17, 20)}&token={self.token}\")).content.decode())\n",
        "        return self.parseResponseToQuestions(response)\n",
        "\n",
        "    def parseResponseToQuestions(self, response):\n",
        "        if response[\"response_code\"] == 5:\n",
        "            return [[\"Woaw woaw woaw slow down! Enter 'c' to continue.\", \"c\"]]\n",
        "        qns = []\n",
        "        for x in response[\"results\"]:\n",
        "            qns.append([html.unescape(x[\"question\"]).strip(), html.unescape(x[\"correct_answer\"]).strip()])\n",
        "        return qns\n",
        "\n",
        "def testQuizMode(sleepTime = 5):\n",
        "    a = retriever()\n",
        "    print(\"-----Rapid (databased) Flamethrower-----\\nType 'q' to quit anytime!\\n\")\n",
        "    while True:\n",
        "        qData = a.getSingleRandom()\n",
        "        print(f\"Question: {qData[0][0]}\")\n",
        "        inp = input(f\"Enter answer (note: answer will only be evaluated after {sleepTime}s to prevent overload): \")\n",
        "        if inp == \"q\":\n",
        "            break\n",
        "        if inp.lower() == qData[0][1].lower():\n",
        "            print(\"Correct!!\")\n",
        "        else:\n",
        "            print(f\"Wrong :(. Answer is {qData[0][1]}\")\n",
        "        print()\n",
        "        time.sleep(sleepTime)\n",
        "\n",
        "testQuizMode(0)"
      ]
    }
  ]
}